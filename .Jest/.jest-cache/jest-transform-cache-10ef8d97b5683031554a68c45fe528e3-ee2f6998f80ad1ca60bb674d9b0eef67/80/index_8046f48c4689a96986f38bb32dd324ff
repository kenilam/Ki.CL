1e192bbf07f5845bb5d556ec08a17e4e
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.array.for-each");

require("core-js/modules/es.object.define-property");

require("core-js/modules/web.dom-collections.for-each");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _resources = _interopRequireDefault(require("$/resources"));

var _Router = require("@/Component/Router");

var _WebGL = _interopRequireDefault(require("@/Component/WebGL"));

var _Helper = require("@/Helper");

var _Hook = require("@Hook");

var _react = _interopRequireWildcard(require("react"));

var _Gallery = _interopRequireDefault(require("./Gallery"));

var _Partial = require("./Partial");

var _Style = _interopRequireDefault(require("./Style"));

var _Tween = _interopRequireWildcard(require("./Tween"));

(function () {
  var enterModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).enterModule;
  enterModule && enterModule(module);
})();

var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal["default"].signature : function (a) {
  return a;
};

var path = _resources["default"].view.home.path;
var delay = (0, _Helper.CSSUnit)(_Style["default"].delay) / 1000;
var duration = (0, _Helper.CSSUnit)(_Style["default"].duration) / 1000;
var backFill = new _Partial.BackFill();
var gallery = new _Gallery["default"]();
var mask = new _Partial.Mask();
var name = new _Partial.Name();
var slogan = new _Partial.Slogan();

var render = function render() {
  return [[backFill, gallery, mask, name, slogan]];
};

var previousWindowSizes = {
  height: window.innerHeight,
  width: window.innerWidth
};

var Graphic = function Graphic(_ref) {
  var history = _ref.history,
      onComplete = _ref.onComplete;
  var isActiveRoute = history.location.pathname === path;
  var _window = window,
      height = _window.innerHeight,
      width = _window.innerWidth;

  var windowSizesChanged = function windowSizesChanged() {
    var _previousWindowSizes = previousWindowSizes,
        previousHeight = _previousWindowSizes.height,
        previousWidth = _previousWindowSizes.width;
    return previousHeight !== height || previousWidth !== width;
  };

  var reset = function reset() {
    if (mask.alpha >= 1) {
      return;
    }

    gallery.update({
      x: width / 2,
      y: height / 2
    });
    mask.update({
      x: width / 2,
      y: height / 2
    });
    name.update();
    slogan.update();
  };

  var resize = function resize() {
    backFill.update({
      alpha: 1,
      height: height,
      width: width
    });

    if (!windowSizesChanged() || mask.alpha === 0) {
      return;
    }

    gallery.update({
      alpha: 1,
      height: height,
      width: width
    });
    mask.update({
      alpha: 1,
      height: height,
      width: width
    });
    name.update({
      alpha: 1,
      height: height,
      width: width,
      y: -name.height
    });
    slogan.update({
      alpha: 1,
      height: height,
      width: width,
      y: -slogan.height
    });
    previousWindowSizes = {
      height: height,
      width: width
    };
  };

  var tween = new _Tween.gsap.TimelineMax({
    paused: true,
    onComplete: onComplete,
    onReverseComplete: onComplete
  });

  var animateIn = function animateIn() {
    if (mask.alpha >= 1) {
      return;
    }

    tween.restart(true);
  };

  var animateOut = function animateOut() {
    if (isActiveRoute) {
      return;
    }

    tween.reverse(0);
  };

  [new _Tween["default"]({
    duration: 0,
    onUpdate: function onUpdate() {
      gallery.update({
        height: height,
        width: width
      });
      mask.update({
        x: width / 2,
        y: height / 2
      });
      name.update();
      slogan.update();
    },
    pause: false
  }), new _Tween["default"]({
    delay: duration * 0.1,
    duration: duration * 0.1,
    ease: _Tween.gsap.Linear.easeNone,
    onUpdate: function onUpdate(_ref2) {
      var alpha = _ref2.value;
      mask.update({
        alpha: alpha,
        height: height * alpha,
        width: width / 20 * alpha,
        x: width / 2 - width / 40 * alpha,
        y: height / 2 - height / 2 * alpha
      });
    },
    pause: false
  }), new _Tween["default"]({
    duration: duration * 0.2,
    ease: _Tween.gsap.Back.easeOut,
    onUpdate: function onUpdate(_ref3) {
      var alpha = _ref3.value;
      mask.update({
        alpha: 1,
        height: height,
        width: width * alpha,
        x: width / 2 - width / 2 * alpha
      });
    },
    pause: false
  }), new _Tween["default"]({
    duration: duration * 0.4,
    ease: _Tween.gsap.Back.easeOut,
    onUpdate: function onUpdate(_ref4) {
      var alpha = _ref4.value;
      slogan.update({
        alpha: alpha,
        height: height,
        width: width,
        y: -slogan.height
      });
    },
    pause: false
  }), new _Tween["default"]({
    duration: duration * 0.3,
    ease: _Tween.gsap.Expo.easeIn,
    onUpdate: function onUpdate(_ref5) {
      var alpha = _ref5.value;
      name.update({
        alpha: alpha,
        height: height,
        width: width,
        y: -name.height
      });
    },
    pause: false
  }), new _Tween["default"]({
    duration: duration * 0.3,
    ease: _Tween.gsap.Expo.easeIn,
    onUpdate: function onUpdate(_ref6) {
      var alpha = _ref6.value;
      gallery.update({
        alpha: alpha,
        height: height,
        width: width
      });
    },
    pause: false
  })].forEach(function (_ref7) {
    var sequence = _ref7.sequence;
    tween.add(sequence);
  });
  (0, _Hook.WindowSizes)();
  (0, _react.useEffect)(function () {
    resize();
    animateIn();
    animateOut();
    return function () {
      reset();
      tween.kill();
    };
  });
  tween.delay(delay);
  return _react["default"].createElement(_WebGL["default"], {
    className: _Style["default"]["default"],
    height: height,
    width: width,
    render: render
  });
};

__signature__(Graphic, "useEffect{}");

backFill.mask = mask;

var _default = (0, _Router.withRouter)(Graphic);

var _default2 = _default;
exports["default"] = _default2;
;

(function () {
  var reactHotLoader = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).default;

  if (!reactHotLoader) {
    return;
  }

  reactHotLoader.register(path, "path", "/Users/keni.lam/Prototype/Ki.CL/project/src/View/Home/WebGL/index.tsx");
  reactHotLoader.register(delay, "delay", "/Users/keni.lam/Prototype/Ki.CL/project/src/View/Home/WebGL/index.tsx");
  reactHotLoader.register(duration, "duration", "/Users/keni.lam/Prototype/Ki.CL/project/src/View/Home/WebGL/index.tsx");
  reactHotLoader.register(backFill, "backFill", "/Users/keni.lam/Prototype/Ki.CL/project/src/View/Home/WebGL/index.tsx");
  reactHotLoader.register(gallery, "gallery", "/Users/keni.lam/Prototype/Ki.CL/project/src/View/Home/WebGL/index.tsx");
  reactHotLoader.register(mask, "mask", "/Users/keni.lam/Prototype/Ki.CL/project/src/View/Home/WebGL/index.tsx");
  reactHotLoader.register(name, "name", "/Users/keni.lam/Prototype/Ki.CL/project/src/View/Home/WebGL/index.tsx");
  reactHotLoader.register(slogan, "slogan", "/Users/keni.lam/Prototype/Ki.CL/project/src/View/Home/WebGL/index.tsx");
  reactHotLoader.register(render, "render", "/Users/keni.lam/Prototype/Ki.CL/project/src/View/Home/WebGL/index.tsx");
  reactHotLoader.register(previousWindowSizes, "previousWindowSizes", "/Users/keni.lam/Prototype/Ki.CL/project/src/View/Home/WebGL/index.tsx");
  reactHotLoader.register(Graphic, "Graphic", "/Users/keni.lam/Prototype/Ki.CL/project/src/View/Home/WebGL/index.tsx");
  reactHotLoader.register(_default, "default", "/Users/keni.lam/Prototype/Ki.CL/project/src/View/Home/WebGL/index.tsx");
})();

;

(function () {
  var leaveModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).leaveModule;
  leaveModule && leaveModule(module);
})();

module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,