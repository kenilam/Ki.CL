{"version":3,"sources":["index.tsx"],"names":["actions","windowSizes","window","height","innerHeight","width","innerWidth","initialStates","reducers","state","type","Error","WindowSizes","dispatch","updateWindowSizes","addEventListener","removeEventListener","sizes"],"mappings":";;;;;;;;;;;;;AAAA;;;;;;;;;;;AAGA,IAAMA,OAAO,GAAG;AACdC,EAAAA,WAAW,EAAE;AADC,CAAhB;;cAIiDC,M;IAA7BC,M,WAAbC,W;IAAiCC,K,WAAZC,U;AAE5B,IAAMC,aAAa,GAAG;AAACN,EAAAA,WAAW,EAAE;AAACE,IAAAA,MAAM,EAANA,MAAD;AAASE,IAAAA,KAAK,EAALA;AAAT;AAAd,CAAtB;;AAEA,IAAMG,QAAQ,GAAG;AACfP,EAAAA,WADe,uBACHQ,KADG,QACmE;AAAA,QAA1CC,IAA0C,QAA1CA,IAA0C;AAAA,QAApCT,YAAoC,QAApCA,WAAoC;;AAChF,QAAIS,IAAI,KAAKV,OAAO,CAACC,WAArB,EAAkC;AAChC,aAAO;AAACA,QAAAA,WAAW,EAAEA,YAAW,IAAIQ,KAAK,CAACR;AAAnC,OAAP;AACD;;AAED,UAAM,IAAIU,KAAJ,EAAN;AACD;AAPc,CAAjB;;;AAUA,SAASC,WAAT,GAAuB;AAAA,oBACa,uBAAWJ,QAAQ,CAACP,WAApB,EAAiC;AAACA,IAAAA,WAAW,EAAEM,aAAa,CAACN;AAA5B,GAAjC,CADb;AAAA;AAAA,MACbA,WADa,mBACbA,WADa;AAAA,MACCY,QADD;;AAGrB,MAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAAA,mBACmBZ,MADnB;AAAA,QACVC,MADU,YACvBC,WADuB;AAAA,QACUC,KADV,YACFC,UADE;AAG9BO,IAAAA,QAAQ,CAAC;AAACH,MAAAA,IAAI,EAAEV,OAAO,CAACC,WAAf;AAA4BA,MAAAA,WAAW,EAAE;AAACE,QAAAA,MAAM,EAANA,MAAD;AAASE,QAAAA,KAAK,EAALA;AAAT;AAAzC,KAAD,CAAR;AACD,GAJD;;AAMA,wBAAU,YAAM;AACdH,IAAAA,MAAM,CAACa,gBAAP,CAAwB,QAAxB,EAAkCD,iBAAlC;AAEA,WAAO,YAAM;AACXZ,MAAAA,MAAM,CAACc,mBAAP,CAA2B,QAA3B,EAAqCF,iBAArC;AACD,KAFD;AAGD,GAND;AAQA,SAAO;AAACG,IAAAA,KAAK,EAAEhB,WAAR;AAAqBa,IAAAA,iBAAiB,EAAjBA;AAArB,GAAP;AACD;;cAlBQF,W;;eAqBMA,W;;;;;;;;;;;;0BAvCTZ,O;0BAIcG,M;0BAAoBE,K;0BAElCE,a;0BAEAC,Q;0BAUGI,W","sourcesContent":["import {useEffect, useReducer} from 'react';\nimport * as IWindowSizes from './spec';\n\nconst actions = {\n  windowSizes: 'UPDATE_WINDOW_SIZES' as IWindowSizes.Type\n};\n\nconst {innerHeight: height, innerWidth: width} = window;\n\nconst initialStates = {windowSizes: {height, width}};\n\nconst reducers = {\n  windowSizes(state: IWindowSizes.State, {type, windowSizes}: IWindowSizes.Actions) {\n    if (type === actions.windowSizes) {\n      return {windowSizes: windowSizes || state.windowSizes};\n    }\n    \n    throw new Error();\n  },\n};\n\nfunction WindowSizes() {\n  const [{windowSizes}, dispatch] = useReducer(reducers.windowSizes, {windowSizes: initialStates.windowSizes});\n  \n  const updateWindowSizes = () => {\n    const {innerHeight: height, innerWidth: width} = window;\n    \n    dispatch({type: actions.windowSizes, windowSizes: {height, width}});\n  };\n  \n  useEffect(() => {\n    window.addEventListener('resize', updateWindowSizes);\n    \n    return () => {\n      window.removeEventListener('resize', updateWindowSizes);\n    }\n  });\n  \n  return {sizes: windowSizes, updateWindowSizes};\n}\n\nexport {initialStates, reducers, actions};\nexport default WindowSizes;\n"]}