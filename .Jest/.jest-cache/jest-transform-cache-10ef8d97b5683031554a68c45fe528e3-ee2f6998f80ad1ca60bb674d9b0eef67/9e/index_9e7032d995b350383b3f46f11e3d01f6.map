{"version":3,"sources":["index.tsx"],"names":["PARTICLE_COUNTS","PARTICLE_GROUP_COUNTS","PARTICLE_RATIO","ROTATION_DURATION","GROUPS","Array","from","CIRCLES","Visualizer","map","angle","start","end","value","index","dimension","area","container","PIXI","Container","rotation","rotations","alpha","length","addChild","circle","Circle","groups","forEach","circles","rotationTween","Tween","to","ease","gsap","Linear","easeNone","repeat","onUpdate","rotate","height","width","x","y","rest","parent","i","update","distance","Math","PI","kill","concat","reset","tween","window","innerHeight","innerWidth","autobind"],"mappings":"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","sourcesContent":["import {gsap, PIXI, Tween} from '@/Component/WebGL';\nimport {RandomNumber} from '@/Helper';\nimport autobind from 'autobind-decorator';\nimport {Circle} from './Partial';\n\nimport IVisualizer from './spec';\n\nconst PARTICLE_COUNTS = 50;\nconst PARTICLE_GROUP_COUNTS = 10;\nconst PARTICLE_RATIO = 0.002;\nconst ROTATION_DURATION = 10000;\n\nconst GROUPS = Array.from(new Array(PARTICLE_GROUP_COUNTS));\nconst CIRCLES = Array.from(new Array(PARTICLE_COUNTS));\n\nclass Visualizer extends PIXI.Container {\n  private readonly rotations: { angle: number }[] = GROUPS.map(() => ({\n    angle: RandomNumber({start: 0, end: 360})\n  }));\n  private readonly groups: Circle[][] = GROUPS.map(\n    (value, index) => {\n      if (value) {\n        return;\n      }\n      \n      const dimension = this.area * PARTICLE_RATIO;\n      \n      const container = new PIXI.Container();\n      \n      container.rotation = this.rotations[index].angle;\n      container.alpha = (index + 1) / GROUPS.length;\n      \n      this.addChild(container);\n      \n      return CIRCLES.map(\n        () => {\n          const circle = new Circle({ dimension });\n  \n          container.addChild(circle);\n          \n          return circle;\n        }\n      );\n    }\n  );\n  \n  private rotationTween: Tween;\n  \n  constructor() {\n    super();\n    \n    this.groups.forEach(\n      (circles, index) => {\n        if (!circles) {\n          return;\n        }\n        \n        const rotation = this.rotations[index];\n        \n        this.rotationTween = Tween.to(rotation, ROTATION_DURATION * (index + 1), {\n          ease: gsap.Linear.easeNone,\n          angle: 360 * (index % 2 ? -1 : 1),\n          repeat: -1,\n          onUpdate: this.rotate(index)\n        });\n      }\n    );\n  }\n  \n  private get area() {\n    const {\n      innerHeight: height,\n      innerWidth: width\n    } = window;\n    \n    return height > width ? width : height;\n  }\n  \n  public update({height, width, x, y, ...rest}: IVisualizer.UpdateProps) {\n    this.groups.forEach(\n      (circles, index) => {\n        const parent = circles[0].parent;\n        \n        parent.x = x + width / 2;\n        parent.y = y + height / 2;\n        \n        circles.forEach(\n          (circle, i) => {\n            circle.update({\n              ...rest,\n              height,\n              width,\n              dimension: this.area * PARTICLE_RATIO * (1 + index / 10),\n              distance: this.area / (3 - (index / 5)),\n              rotation: Math.PI * 2 / PARTICLE_COUNTS * i,\n              x: -width / 2,\n              y: -height / 2,\n            });\n          }\n        );\n      }\n    );\n  }\n  \n  public reset() {\n    this.rotationTween.kill();\n    \n    [].concat(...this.groups).map(\n      (circle: Circle) => {\n        circle.reset();\n      }\n    )\n  }\n  \n  @autobind\n  private rotate(index: number) {\n    return () => {\n      const rotation = this.rotations[index].angle;\n      const circles = this.groups[index];\n      \n      circles[0].parent.rotation = rotation;\n      circles[RandomNumber({start: 0, end: PARTICLE_COUNTS - 1})].tween();\n    }\n  }\n}\n\nexport default Visualizer;\n"]}