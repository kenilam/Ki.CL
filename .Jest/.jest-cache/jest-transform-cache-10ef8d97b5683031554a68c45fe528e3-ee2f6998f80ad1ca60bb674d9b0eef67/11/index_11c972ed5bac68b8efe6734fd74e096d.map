{"version":3,"sources":["index.tsx"],"names":["DEFAULT_DENSITY","DEFAULT_RADIUS","circle","density","x","y","radius","concat","Array","from","window","devicePixelRatio","map","value","degree","Math","cos","sin","circularPoints","rect","height","width","bottomLeft","bottomRight","topLeft","topRight"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,eAAe,GAAG,GAAxB;AACA,IAAMC,cAAc,GAAG,CAAvB;;AAEA,IAAMC,MAAwB,GAAG,SAA3BA,MAA2B;AAAA;;AAAA,0BAAEC,OAAF;AAAA,MAAEA,OAAF,6BAAYH,eAAZ;AAAA,MAA6BI,CAA7B,QAA6BA,CAA7B;AAAA,MAAgCC,CAAhC,QAAgCA,CAAhC;AAAA,MAAmCC,MAAnC,QAAmCA,MAAnC;AAAA,SAC/B,aAAGC,MAAH,kDACKC,KAAK,CAACC,IAAN,CAAW,IAAID,KAAJ,CAAUL,OAAO,GAAGO,MAAM,CAACC,gBAA3B,CAAX,EAAyDC,GAAzD,CACD,UAACC,KAAD,EAAQC,MAAR;AAAA,WACE,CAACD,KAAD,IAAU,CACRT,CAAC,GAAIE,MAAM,GAAGS,IAAI,CAACC,GAAL,CAASF,MAAT,CADN,EAERT,CAAC,GAAIC,MAAM,GAAGS,IAAI,CAACE,GAAL,CAASH,MAAT,CAFN,CADZ;AAAA,GADC,CADL,EAD+B;AAAA,CAAjC;;;;AAYA,IAAMI,cAAwC,GAAG,SAA3CA,cAA2C;AAAA,4BAAEf,OAAF;AAAA,MAAEA,OAAF,8BAAYH,eAAZ;AAAA,MAA6BI,CAA7B,SAA6BA,CAA7B;AAAA,MAAgCC,CAAhC,SAAgCA,CAAhC;AAAA,MAAmCC,MAAnC,SAAmCA,MAAnC;AAAA,SAC/CE,KAAK,CAACC,IAAN,CAAW,IAAID,KAAJ,CAAUL,OAAV,CAAX,EAA+BS,GAA/B,CACE,UAACC,KAAD,EAAQC,MAAR;AAAA,WACE,CAACD,KAAD,IAAU;AACRT,MAAAA,CAAC,EAAEA,CAAC,GAAIE,MAAM,GAAGS,IAAI,CAACC,GAAL,CAASF,MAAT,CADT;AAERT,MAAAA,CAAC,EAAEA,CAAC,GAAIC,MAAM,GAAGS,IAAI,CAACE,GAAL,CAASH,MAAT;AAFT,KADZ;AAAA,GADF,CAD+C;AAAA,CAAjD;;;;AAUA,IAAMK,IAAI,GAAG,SAAPA,IAAO,QAAyE;AAAA;;AAAA,MAAvEC,MAAuE,SAAvEA,MAAuE;AAAA,MAA/DC,KAA+D,SAA/DA,KAA+D;AAAA,MAAxDjB,CAAwD,SAAxDA,CAAwD;AAAA,MAArDC,CAAqD,SAArDA,CAAqD;AAAA,2BAAlDC,MAAkD;AAAA,MAAlDA,MAAkD,6BAAzCL,cAAyC;AACpF,MAAMqB,UAAU,GAAG,CAAClB,CAAC,GAAGE,MAAL,EAAaD,CAAC,GAAGe,MAAJ,GAAad,MAA1B,CAAnB;AACA,MAAMiB,WAAW,GAAG,CAACnB,CAAC,GAAGiB,KAAJ,GAAYf,MAAb,EAAqBD,CAAC,GAAGe,MAAJ,GAAad,MAAlC,CAApB;AACA,MAAMkB,OAAO,GAAG,CAACpB,CAAC,GAAGE,MAAL,EAAaD,CAAC,GAAGC,MAAjB,CAAhB;AACA,MAAMmB,QAAQ,GAAG,CAACrB,CAAC,GAAGiB,KAAJ,GAAYf,MAAb,EAAqBD,CAAC,GAAGC,MAAzB,CAAjB;AAEA,SAAO,aAAGC,MAAH,cACFiB,OADE,QAEFC,QAFE,EAGFF,WAHE,EAIFD,UAJE,EAAP;AAMD,CAZD;;;;;;;;;;;;0BAzBMtB,e;0BACAC,c;0BAEAC,M;0BAYAgB,c;0BAUAC,I","sourcesContent":["import * as IGeometry from './spec';\n\nconst DEFAULT_DENSITY = 720;\nconst DEFAULT_RADIUS = 0;\n\nconst circle: IGeometry.Circle = ({density = DEFAULT_DENSITY, x, y, radius}) => (\n  [].concat(\n    ...Array.from(new Array(density * window.devicePixelRatio)).map(\n      (value, degree) =>\n        !value && [\n          x + (radius * Math.cos(degree)),\n          y + (radius * Math.sin(degree))\n        ]\n    )\n  )\n);\n\nconst circularPoints: IGeometry.CircularPoints = ({density = DEFAULT_DENSITY, x, y, radius}) => (\n  Array.from(new Array(density)).map(\n    (value, degree) =>\n      !value && {\n        x: x + (radius * Math.cos(degree)),\n        y: y + (radius * Math.sin(degree))\n      }\n  )\n);\n\nconst rect = ({height, width, x, y, radius = DEFAULT_RADIUS}: IGeometry.RectProps) => {\n  const bottomLeft = [x + radius, y + height - radius];\n  const bottomRight = [x + width - radius, y + height - radius];\n  const topLeft = [x + radius, y + radius];\n  const topRight = [x + width - radius, y + radius];\n  \n  return [].concat(\n    ...topLeft,\n    ...topRight,\n    ...bottomRight,\n    ...bottomLeft\n  );\n};\n\nexport {circle, circularPoints, rect};\n\n"]}