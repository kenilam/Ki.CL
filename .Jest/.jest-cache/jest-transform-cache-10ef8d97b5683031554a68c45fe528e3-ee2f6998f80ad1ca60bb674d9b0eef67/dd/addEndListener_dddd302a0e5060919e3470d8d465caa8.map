{"version":3,"sources":["addEndListener.tsx"],"names":["window","setTimeout","getAnimationDuration","node","parseFloat","style","animationDuration","duration","parentNode","Math","max","concat","Array","from","querySelectorAll","Style","cssTransition","map","addEndListener","done","waitTime"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;;;;;;cAGqBA,M;IAAdC,U,WAAAA,U;;AAEP,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,IAAD;AAAA,SAC3BC,UAAU,CAACD,IAAI,CAACE,KAAL,CAAWC,iBAAZ,CAAV,IAA4C,CADjB;AAAA,CAA7B;;AAGA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACJ,IAAD;AAAA,SACfA,IAAI,IAAIA,IAAI,CAACK,UAAb,GACEC,IAAI,CAACC,GAAL,OAAAD,IAAI,sCACC,GAAGE,MAAH,CACDC,KAAK,CAACC,IAAN,CACEV,IAAI,CAACK,UAAL,CAAgBM,gBAAhB,YAAqCC,kBAAMC,aAA3C,EADF,CADC,EAIDJ,KAAK,CAACC,IAAN,CACEV,IAAI,CAACW,gBAAL,YAA0BC,kBAAMC,aAAhC,EADF,CAJC,EAODC,GAPC,CAQD,UAACd,IAAD;AAAA,WAAuBM,IAAI,CAACC,GAAL,CACrB,uCAAsBP,IAAtB,EAA4B,IAA5B,CADqB,EACcD,oBAAoB,CAACC,IAAD,CADlC,CAAvB;AAAA,GARC,CADD,EADN,GAeI,CAhBW;AAAA,CAAjB;;AAmBA,IAAMe,cAA0B,GAAG,SAA7BA,cAA6B,CAACf,IAAD,EAAOgB,IAAP,EAAgB;AACjD,MAAMC,QAAQ,GAAGb,QAAQ,CAACJ,IAAD,CAAzB;;AAEA,MAAIiB,QAAQ,KAAK,CAAjB,EAAoB;AAClBD,IAAAA,IAAI;AACJ;AACD;;AAEDlB,EAAAA,UAAU,CAACkB,IAAD,EAAOZ,QAAQ,CAACJ,IAAD,CAAf,CAAV;AACD,CATD;;eAWee,c;;;;;;;;;;;;0BAnCRjB,U;0BAEDC,oB;0BAGAK,Q;0BAmBAW,c","sourcesContent":["import Style from '@/Component/CSSTransition/Style';\nimport getTransitionDuration from 'get-transition-duration';\nimport {EndHandler} from 'react-transition-group/Transition';\n\nconst {setTimeout} = window;\n\nconst getAnimationDuration = (node: HTMLElement) =>\n  parseFloat(node.style.animationDuration) || 0;\n\nconst duration = (node: HTMLElement) => (\n  node && node.parentNode ? (\n    Math.max(\n      ...[].concat(\n        Array.from(\n          node.parentNode.querySelectorAll(`.${Style.cssTransition}`)\n        ),\n        Array.from(\n          node.querySelectorAll(`.${Style.cssTransition}`)\n        )\n      ).map(\n        (node: HTMLElement) => Math.max(\n          getTransitionDuration(node, true), getAnimationDuration(node)\n        )\n      )\n    )\n  ) : 0\n);\n\nconst addEndListener: EndHandler = (node, done) => {\n  const waitTime = duration(node);\n  \n  if (waitTime === 0) {\n    done();\n    return;\n  }\n  \n  setTimeout(done, duration(node));\n};\n\nexport default addEndListener;\n"]}