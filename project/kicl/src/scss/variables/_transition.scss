$ease: $ease-out-expo;
$speed: 1000ms;

$fast: $speed / 2;
$faster: $fast / 2;
$fastest: $faster / 2;

$slow: $speed * 2;
$slower: $speed * 3;
$slowest: $speed * 4;

@function vendor-prop-name ($prop-name, $prefix: (webkit moz o ms)) {
	@return prefix($prop-name, $prefix);
}

@function prefix ($property, $prefixes: (webkit moz o ms)) {
    $vendor-prefixed-properties: transform background-clip background-size;
    $result: ();
    @each $prefix in $prefixes {
       @if index($vendor-prefixed-properties, $property) {
         $property: -#{$prefix}-#{$property}
       }

       $result: append($result, $property);
    }

    @return $result;
}

@function trans-prefix ($transition, $prefix: moz) {
    $prefixed: ();
    @each $trans in $transition {
        $prop-name: nth($trans, 1);
        $vendor-prop-name: vendor-prop-name($prop-name, $prefix);
        $prop-vals: nth($trans, 2);
        $prefixed: append($prefixed, ($vendor-prop-name $prop-vals), comma);
    }

    @return $prefixed;
}

@mixin set-will-change ($values...) {
	$will-change: ();

	@each $declaration in $values {
		$prop: nth($declaration, 1);

        $prefix : vendor-prop-name($prop, webkit);
        @if #{$prop} != #{$prefix} {
        	$will-change: append($will-change, $prefix, comma);
        }

        $prefix : vendor-prop-name($prop, moz);
        @if #{$prop} != #{$prefix} {
        	$will-change: append($will-change, $prefix, comma);
        }

        $prefix : vendor-prop-name($prop, ms);
        @if #{$prop} != #{$prefix} {
        	$will-change: append($will-change, $prefix, comma);
        }

        $prefix : vendor-prop-name($prop, o);
        @if #{$prop} != #{$prefix} {
        	$will-change: append($will-change, $prefix, comma);
        }

        $will-change: append($will-change, $prop, comma);
	}

    will-change: $will-change;
}

@mixin unset-transition () {
    -webkit-transition: none;
    -moz-transition: none;
    -ms-transition: none;
    -o-transition: none;
    transition: none;
}

@mixin set-transition ($values...) { 
    $transitions: ();

    @each $declaration in $values {
        $prop-opts: ();

        $prop: nth($declaration, 1);

        $length: length($declaration);

        @if $length > 1 {
	        @for $i from 2 through $length {
               $name : inspect(nth($declaration, $i));

                @if $name {
                    @if $i == 2 {
                        $prop-opts: append($prop-opts, nth($declaration, $i));
                    } @else {
                        $prop-opts: append($prop-opts, $speed);
                    }
                }

                @if $i == $length {
                    @if $name {
                        $prop-opts: append($prop-opts, nth($declaration, $i));
                    } @else {
                        $prop-opts: append($prop-opts, $ease);
                    }
                }
            }
	    } @else {
	    	$prop-opts: append(append($prop-opts, $speed), $ease);
	    }

        $trans: ($prop $prop-opts);
        $transitions: append($transitions, $trans, comma);
    }

    -webkit-transition: trans-prefix($transitions, webkit);
    -moz-transition: trans-prefix($transitions, moz);
    -ms-transition: trans-prefix($transitions, ms);
    -o-transition: trans-prefix($transitions, o);
    transition: $transitions;

    @include set-will-change($values...);
}